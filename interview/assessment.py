# -*- coding: utf-8 -*-
import os
import logging
import re
from typing import Dict, Any, List, Optional
from datetime import datetime

from hr_utils.api_utils import generate_answer

logger = logging.getLogger('hr_system')

def define_key_requirements(vacancy: str, candidate_position: str, model: str = 'gpt-4o') -> str:
    """
    Определяет ключевые требования к кандидату на основе вакансии.
    
    Args:
        vacancy: Текст вакансии
        candidate_position: Позиция кандидата
        model: Модель для генерации (по умолчанию 'gpt-4o')
        
    Returns:
        Текст с ключевыми требованиями
    """
    # Системный промпт для генерации требований
    system_key_requirements = f"""
    Ты опытный HR-специалист по подбору персонала с глубоким знанием рынка труда и требований для позиции {candidate_position}.
    Твоя задача - проанализировать описание вакансии и выделить ключевые требования, которые определяют успех на данной должности.
    Сосредоточься на профессиональных навыках, опыте работы, образовании и личностных качествах, необходимых для эффективной работы.
    """

    # Запрос для генерации требований
    defining_key_requirements = f"""
    # Вакансия: {candidate_position}

    # Описание вакансии:
    {vacancy}

    # Задача:
    Проанализируй описание вакансии и сформулируй 10 ключевых требований, которые наиболее важны для данной позиции.

    # Требования к формату:
    1. Представь требования в виде пронумерованного списка (1., 2., и т.д.)
    2. Каждое требование должно начинаться с новой строки
    3. Требования должны быть конкретными, измеримыми и однозначными
    4. Сформулируй требования в порядке убывания важности
    5. Включи как профессиональные, так и личностные качества
    6. Для технических позиций укажи конкретные технологии и инструменты
    7. Для управленческих позиций выдели требования к опыту руководства и коммуникативным навыкам
    """

    try:
        # Генерация ключевых требований
        key_requirements = generate_answer(
            system_key_requirements,
            defining_key_requirements,
            model=model
        )
        
        logger.info(f"Сгенерированы ключевые требования для позиции {candidate_position}")
        return key_requirements
    except Exception as e:
        error_msg = f"Ошибка при генерации ключевых требований: {str(e)}"
        logger.error(error_msg)
        return "Не удалось сгенерировать ключевые требования."

def generate_final_assessment(interview_summary: str, vacancy: str, key_requirements: str, 
                             candidate_position: str, company_name: str = "компания", 
                             model: str = 'gpt-4o') -> str:
    """
    Генерирует итоговую оценку кандидата на основе собеседования.
    
    Args:
        interview_summary: Полный текст собеседования
        vacancy: Текст вакансии
        key_requirements: Ключевые требования к кандидату
        candidate_position: Позиция кандидата
        company_name: Название компании (по умолчанию "компания")
        model: Модель для генерации (по умолчанию 'gpt-4o')
        
    Returns:
        Текст с итоговой оценкой кандидата
    """
    # Системный промпт для анализа
    prompt_analysis = f"""
    Ты опытный HR-аналитик с 15-летним стажем в подборе персонала на позицию {candidate_position}.
    Твоя задача - провести глубокий анализ результатов собеседования и сформировать профессиональное заключение.
    Опирайся исключительно на факты из резюме и ответов кандидата, избегая предположений и догадок.
    Заключение должно быть объективным, структурированным и содержать конкретную рекомендацию по найму.
    """

    # Запрос для анализа
    query_analysis = f"""
    # ДАННЫЕ ДЛЯ АНАЛИЗА:

    ## Вакансия:
    Позиция: {candidate_position}
    Компания: {company_name}

    ## Описание вакансии:
    {vacancy}

    ## Ключевые требования к кандидату:
    {key_requirements}

    ## Полная запись собеседования:
    {interview_summary}

    # ЗАДАЧИ АНАЛИЗА:

    1. **Соответствие ключевым требованиям**:
       - Оцени соответствие кандидата каждому из ключевых требований
       - Выдели 3-5 сильных сторон кандидата с конкретными примерами из собеседования
       - Выяви 3-5 слабых сторон или областей для развития

    2. **Опыт работы**:
       - Определи основной навык, критически важный для позиции {candidate_position}
       - Рассчитай реальный опыт работы в месяцах по этому навыку
       - Учитывай только те периоды, где явно упоминается этот навык
       - Укажи название навыка и общую продолжительность опыта в месяцах

    3. **Профессиональные компетенции**:
       - Оцени технические/профессиональные навыки кандидата
       - Проанализируй глубину понимания предметной области
       - Выдели уникальные компетенции, выделяющие кандидата

    4. **Личностные качества и культурное соответствие**:
       - Оцени коммуникативные навыки и способность работать в команде
       - Проанализируй мотивацию и заинтересованность в вакансии
       - Определи соответствие корпоративной культуре компании

    # ФОРМАТ ЗАКЛЮЧЕНИЯ:

    1. **Общая характеристика кандидата** (1 абзац)
    2. **Оценка соответствия ключевым требованиям** (таблица или список)
    3. **Анализ опыта работы с основным навыком** (название навыка + количество месяцев)
    4. **Сильные стороны** (3-5 пунктов с примерами)
    5. **Области для развития** (3-5 пунктов с примерами)
    6. **Итоговая рекомендация**: Рекомендовать к найму / Рассмотреть после дополнительного собеседования / Отклонить
    """

    try:
        # Генерация итогового заключения
        analysis = generate_answer(
            prompt_analysis,
            query_analysis,
            model=model
        )
        
        logger.info(f"Сгенерирована итоговая оценка кандидата на позицию {candidate_position}")
        return analysis
    except Exception as e:
        error_msg = f"Ошибка при генерации итоговой оценки: {str(e)}"
        logger.error(error_msg)
        return f"Не удалось сгенерировать итоговую оценку кандидата: {str(e)}"

def save_assessment_report(assessment: str, candidate_position: str, resume_id: str = None, 
                          company_name: str = "компания", resume_source: str = None,
                          output_dir: str = "./data") -> str:
    """
    Сохраняет отчет об оценке кандидата в файл.
    
    Args:
        assessment: Текст оценки кандидата
        candidate_position: Позиция кандидата
        resume_id: Идентификатор резюме (если доступен)
        company_name: Название компании
        resume_source: Источник резюме
        output_dir: Директория для сохранения файла
        
    Returns:
        Путь к созданному файлу отчета
    """
    try:
        # Формируем имя файла с текущей датой и временем
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"assessment_{timestamp}.txt"
        filepath = os.path.join(output_dir, filename)
        
        # Создаем директорию, если она не существует
        os.makedirs(output_dir, exist_ok=True)
        
        # Формируем содержимое отчета
        report_content = f"ИТОГОВОЕ ЗАКЛЮЧЕНИЕ О КАНДИДАТЕ\n"
        report_content += f"{'=' * 50}\n\n"
        report_content += f"Кандидат на позицию: {candidate_position}\n"
        report_content += f"Компания: {company_name}\n"
        
        if resume_source:
            report_content += f"Источник резюме: {resume_source}\n"
        
        if resume_id:
            report_content += f"ID резюме: {resume_id}\n"
            
        report_content += f"Дата и время: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        report_content += f"{'=' * 50}\n\n"
        report_content += assessment
        
        # Записываем отчет в файл
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"Отчет об оценке кандидата сохранен в файл: {filepath}")
        return filepath
    except Exception as e:
        error_msg = f"Ошибка при сохранении отчета: {str(e)}"
        logger.error(error_msg)
        print(error_msg)
        return None
