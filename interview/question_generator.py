# -*- coding: utf-8 -*-
import os
import json
import logging
import re
from typing import List, Dict, Any, Optional

from hr_utils.api_utils import generate_answer

logger = logging.getLogger('hr_system')

def load_general_questions(file_path: str) -> Dict[str, List[str]]:
    """
    Загружает общие вопросы для собеседований из JSON-файла.
    
    Args:
        file_path: Путь к JSON-файлу с вопросами
        
    Returns:
        Словарь с вопросами по категориям
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            questions = json.load(f)
        logger.info(f"Загружены вопросы для {len(questions)} позиций")
        return questions
    except Exception as e:
        error_msg = f"Ошибка при загрузке вопросов: {str(e)}"
        logger.error(error_msg)
        return {
            'Python_Dev': [
                "1. Расскажите, пожалуйста, о вашем опыте работы с Python.",
                "2. Какие фреймворки Python вы использовали?",
                "3. Расскажите о наиболее сложном проекте, над которым вы работали.",
                "4. Как вы организуете свой код для обеспечения его читаемости и поддерживаемости?",
                "5. Какие инструменты тестирования вы использовали в своих проектах?"
            ],
            'Head_of_sales': [
                "1. Расскажите о вашем опыте управления отделом продаж.",
                "2. Какие методики повышения эффективности продаж вы использовали?",
                "3. Как вы мотивируете свою команду?",
                "4. Расскажите о самом успешном проекте по увеличению продаж, которым вы руководили.",
                "5. Как вы работаете с ключевыми клиентами?"
            ],
            'HR_Director': [
                "1. Расскажите о вашем опыте работы в HR.",
                "2. Какие методики оценки персонала вы использовали?",
                "3. Как вы выстраиваете систему адаптации новых сотрудников?",
                "4. Расскажите о самом сложном HR-проекте, которым вы руководили.",
                "5. Как вы работаете с корпоративной культурой компании?"
            ]
        }

def select_questions_for_position(position: str, questions_dict: Dict[str, List[str]]) -> List[str]:
    """
    Выбирает подходящие вопросы для указанной позиции.
    
    Args:
        position: Название позиции
        questions_dict: Словарь с вопросами по категориям
        
    Returns:
        Список вопросов для указанной позиции
    """
    position_lower = position.lower()
    
    # Сначала проверяем прямое соответствие в ключах
    for key in questions_dict:
        if key.lower() in position_lower:
            logger.info(f"Выбраны вопросы для позиции: {key}")
            return questions_dict[key]
    
    # Если прямого соответствия нет, определяем по ключевым словам
    if any(word in position_lower for word in ["python", "разработчик", "программист", "developer"]):
        logger.info(f"Выбраны вопросы для Python разработчика")
        return questions_dict.get('Python_Dev', [])
    elif any(word in position_lower for word in ["продаж", "sales", "коммерческий"]):
        logger.info(f"Выбраны вопросы для руководителя продаж")
        return questions_dict.get('Head_of_sales', [])
    elif any(word in position_lower for word in ["hr", "персонал", "кадр"]):
        logger.info(f"Выбраны вопросы для HR специалиста")
        return questions_dict.get('HR_Director', [])
    
    # Если не смогли определить тип, возвращаем универсальные вопросы
    logger.info(f"Не удалось определить тип позиции, используются общие вопросы")
    return [
        "1. Расскажите, пожалуйста, о своем профессиональном опыте.",
        "2. Какие ключевые навыки вы считаете своими сильными сторонами?",
        "3. Расскажите о самом интересном проекте, над которым вы работали.",
        "4. Какие инструменты и методики вы используете в своей работе?",
        "5. Почему вы заинтересованы в этой позиции?"
    ]

def generate_additional_questions(interview_summary: str, vacancy: str, candidate_position: str, 
                                 model: str = 'gpt-4o') -> List[str]:
    """
    Генерирует дополнительные вопросы на основе анализа собеседования.
    
    Args:
        interview_summary: Текст собеседования
        vacancy: Текст вакансии
        candidate_position: Позиция кандидата
        model: Модель для генерации (по умолчанию 'gpt-4o')
        
    Returns:
        Список сгенерированных вопросов
    """
    prompt_system = f"""
    Ты опытный HR-специалист с более чем 10-летним опытом проведения собеседований на позицию {candidate_position}.
    Твоя задача — задать 10 (десять) чётких вопросов кандидату по результатам анализа первой части собеседования.
    Вопросы должны быть направлены на выявление несоответствий между заявленными навыками и фактическим опытом.
    Будь особенно внимателен к формулировкам, где кандидат чрезмерно хвалит себя без конкретных примеров.
    Твои вопросы должны быть конкретными, основанными на ответах кандидата и требованиях вакансии.
    Избегай абстрактных или теоретических вопросов - задавай вопросы о реальном опыте и конкретных ситуациях.
    """

    prompt_user = f"""
    # Информация для анализа:

    ## Позиция: {candidate_position}

    ## Содержание собеседования:
    {interview_summary}

    ## Описание вакансии:
    {vacancy}

    # Задача:
    Проанализируй информацию из собеседования и сформулируй 10 дополнительных вопросов, чтобы:

    1. Выявить недостающие навыки и опыт:
       - Сравни требования вакансии с опытом, указанным в резюме и ответах
       - Определи пробелы в навыках и задай вопросы об этих областях
       - Сфокусируйся на ключевых технических навыках для позиции {candidate_position}

    2. Проверить мотивацию и командную работу:
       - Задай вопросы о предыдущем опыте работы в команде
       - Выясни отношение к конфликтам и сложным ситуациям
       - Проверь соответствие ценностей кандидата корпоративной культуре

    3. Включи неожиданные и проверочные вопросы:
       - Добавь 2-3 неудобных вопроса о потенциальных слабых сторонах
       - Сформулируй 2-3 вопроса для проверки согласованности предыдущих ответов
       - Задай вопросы о конкретных технических проблемах из области {candidate_position}

    # Формат вывода:
    - Каждый вопрос должен начинаться с цифры и точки (1., 2., и т.д.)
    - Каждый вопрос должен быть на новой строке
    - Не группируй вопросы по категориям - представь их в произвольном порядке
    - Не добавляй комментарии, заголовки или пояснения к вопросам
    """

    try:
        # Генерация вопросов
        additional_questions = generate_answer(
            prompt_system=prompt_system,
            prompt_user=prompt_user,
            model=model
        )
        
        # Обработка результатов - извлечение только вопросов
        questions_list = [q.strip() for q in additional_questions.split('\n') if q.strip()]
        questions_list = [q for q in questions_list if re.match(r'^\d+\.', q)]
        
        logger.info(f"Сгенерировано {len(questions_list)} дополнительных вопросов")
        return questions_list
    except Exception as e:
        error_msg = f"Ошибка при генерации дополнительных вопросов: {str(e)}"
        logger.error(error_msg)
        return [
            "1. Можете ли вы привести конкретный пример, когда вам пришлось решать сложную техническую проблему?",
            "2. Какие технологии вы изучаете сейчас и почему?",
            "3. Расскажите о ситуации, когда вам приходилось работать с трудным коллегой.",
            "4. Как вы обычно расставляете приоритеты в своей работе?",
            "5. Чем именно вас привлекает эта позиция в нашей компании?"
        ]
